from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import re

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expiremed.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    email = db.Column(db.String(100), unique=True)
    phone = db.Column(db.String(15))
    password = db.Column(db.String(100))
    medicines = db.relationship('Medicine', backref='user', lazy=True)

# Medicine model
class Medicine(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    name = db.Column(db.String(100))
    type = db.Column(db.String(50))
    dosage = db.Column(db.Float)
    dosage_unit = db.Column(db.String(10))
    count = db.Column(db.String(10))
    timing = db.Column(db.String(50))
    before_after_food = db.Column(db.String(10))
    status = db.Column(db.String(10), default='Pending')
    expiry_date = db.Column(db.String(20))

db.create_all()

# Home page
@app.route('/')
def home():
    return render_template('index.html')

# Register
@app.route('/register', methods=['GET','POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        phone = request.form['phone']
        password = request.form['password']

        # Validate email, phone, password
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            flash('Invalid email address')
            return redirect(url_for('register'))
        if not re.match(r'^\d{10}$', phone):
            flash('Invalid phone number')
            return redirect(url_for('register'))
        if len(password) < 6:
            flash('Password must be at least 6 characters')
            return redirect(url_for('register'))

        if User.query.filter_by(email=email).first():
            flash('Email already exists')
            return redirect(url_for('register'))

        user = User(name=name, email=email, phone=phone, password=password)
        db.session.add(user)
        db.session.commit()
        flash('Registration successful! Please login.')
        return redirect(url_for('login'))
    return render_template('register.html')

# Login
@app.route('/login', methods=['GET','POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email, password=password).first()
        if user:
            session['user_id'] = user.id
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid login credentials')
            return redirect(url_for('login'))
    return render_template('login.html')

# Logout
@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('home'))

# Dashboard
@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = User.query.get(session['user_id'])
    medicines = Medicine.query.filter_by(user_id=user.id).all()
    return render_template('dashboard.html', user=user, medicines=medicines)

# Add Medicine
@app.route('/add_medicine', methods=['GET','POST'])
def add_medicine():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = User.query.get(session['user_id'])
    if request.method == 'POST':
        name = request.form['name']
        type = request.form['type']
        dosage = request.form['dosage']
        dosage_unit = request.form['dosage_unit']
        count = request.form['count']
        timing = request.form['timing']
        before_after_food = request.form['before_after_food']
        expiry_date = request.form['expiry_date']
        medicine = Medicine(user_id=user.id, name=name, type=type, dosage=dosage,
                            dosage_unit=dosage_unit, count=count, timing=timing,
                            before_after_food=before_after_food, expiry_date=expiry_date)
        db.session.add(medicine)
        db.session.commit()
        flash('Medicine added successfully!')
        return redirect(url_for('add_medicine'))
    return render_template('add_medicine.html', user=user)

# Update medicine status
@app.route('/mark_medicine/<int:id>/<status>')
def mark_medicine(id, status):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    medicine = Medicine.query.get(id)
    medicine.status = status
    db.session.commit()
    return redirect(url_for('dashboard'))

# Delete medicine
@app.route('/delete_medicine/<int:id>')
def delete_medicine(id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    medicine = Medicine.query.get(id)
    db.session.delete(medicine)
    db.session.commit()
    flash('Medicine deleted successfully!')
    return redirect(url_for('dashboard'))

# Reminder page
@app.route('/reminder')
def reminder():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = User.query.get(session['user_id'])
    medicines = Medicine.query.filter_by(user_id=user.id).all()
    return render_template('reminder.html', user=user, medicines=medicines)

# Alternative Medicine page
@app.route('/alternative')
def alternative():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = User.query.get(session['user_id'])
    return render_template('alternative.html', user=user)

if __name__ == '__main__':
    app.run(debug=True)
